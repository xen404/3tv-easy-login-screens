const util = require('util')
const fs = require('fs')
const serve = require('koa-static')
const Koa = require('koa')
const https = require('https')
const health = require('./health')

const app = new Koa()

app.use(health())
app.use(async (ctx, next) => {
  await next()
  ctx.set('Cache-Control', 'max-age=600')
})
app.use(serve('build'))
app.on('error', (err, ctx) => {
  let errorDetail = ''
  if (ctx) {
    errorDetail = ' while handling request for ' + ctx.url
  }
  console.error('failed to handle request: ' + err + errorDetail)
})

const port = '2022'
const keyFile = '/appl/microservices/ssl/it.internal.key'
const certFile = '/appl/microservices/ssl/it.internal.pem'
const arg = process.argv

if (arg[2] && arg[2] === 'http') {
  console.log('start listening on port ' + port + ' [http]')
  app.listen(port)
} else {
  (async () => {
    const [key, cert] = await Promise.all([keyFile, certFile].map(f => util.promisify(fs.readFile)(f)))
    console.log('start listening on port ' + port + ' [https]')
    https.createServer({ key, cert }, app.callback()).listen(port)
  })()
}
