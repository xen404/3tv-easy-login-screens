{"version":3,"sources":["node_modules/yall-js/src/yall.mjs","node_modules/intersection-observer/intersection-observer.js","src/core/js/drei.js"],"names":["options","lazyClass","lazyBackgroundClass","idleLoadTimeout","observeChanges","events","noPolyfill","win","window","ric","io","ioSupport","crawler","test","navigator","userAgent","dataAttrs","arr","queryDOM","selector","root","slice","call","document","querySelectorAll","yallLoad","element","parentNode","nodeName","yallApplyFn","yallFlipDataAttrs","classList","contains","remove","add","lazyBackgroundLoaded","yallBindEvents","eventIndex","addEventListener","listener","undefined","dataAttrIndex","dataset","setAttribute","autoplay","load","play","items","fn","itemIndex","length","observe","yallCreateMutationObserver","entry","MutationObserver","newElement","lazyElements","indexOf","push","intersectionListener","mutationObserverOptions","childList","subtree","entries","isIntersecting","intersectionRatio","target","timeout","unobserve","filter","lazyElement","disconnect","rootMargin","threshold","observeRootSelector","IntersectionObserverEntry","prototype","Object","defineProperty","get","this","startDoc","doc","frame","getFrameElement","ownerDocument","registry","crossOriginUpdater","crossOriginRect","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_setupCrossOriginUpdater","boundingClientRect","intersectionRect","convertFromParentRect","top","bottom","left","right","width","height","forEach","observer","_checkForIntersections","_resetCrossOriginUpdater","_observationTargets","some","item","nodeType","Error","_registerInstance","_monitorIntersections","_unmonitorIntersections","_unregisterInstance","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","_initThresholds","opt_threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","defaultView","_monitoringDocuments","callback","monitoringInterval","domObserver","setInterval","addEvent","attributes","characterData","_monitoringUnsubscribes","clearInterval","removeEvent","index","rootDoc","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","time","performance","now","rootBounds","_hasCrossedThreshold","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","frameElement","e","ensureDOMRect","targetArea","intersectionArea","Number","toFixed","opt_options","timer","bind","setTimeout","join","node","event","opt_useCapture","attachEvent","removeEventListener","detatchEvent","el","err","y","x","parentBoundingRect","parentIntersectionRect","child","host","assignedSlot","yall","animationElements","checkIfInView","windowHeight","innerHeight","windowTopPosition","pageYOffset","windowBottomPosition","len","elementCurrent","elementHeight","offsetHeight","elementTopPosition"],"mappings":"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","file":"drei.js","sourcesContent":["export default function (options) {\n  options = options || {};\n\n  // Options\n  const lazyClass = options.lazyClass || \"lazy\";\n  const lazyBackgroundClass = options.lazyBackgroundClass || \"lazy-bg\";\n  const idleLoadTimeout = \"idleLoadTimeout\" in options ? options.idleLoadTimeout : 200;\n  const observeChanges = options.observeChanges || false;\n  const events = options.events || {};\n  const noPolyfill = options.noPolyfill || false;\n\n  // Shorthands (saves more than a few bytes!)\n  const win = window;\n  const ric = \"requestIdleCallback\";\n  const io = \"IntersectionObserver\";\n  const ioSupport = io in win && `${io}Entry` in win;\n\n  // App stuff\n  const crawler = /baidu|(?:google|bing|yandex|duckduck)bot/i.test(navigator.userAgent);\n  const dataAttrs = [\"srcset\", \"src\", \"poster\"];\n  const arr = [];\n  const queryDOM = (selector, root) => arr.slice.call((root || document).querySelectorAll(selector || `img.${lazyClass},video.${lazyClass},iframe.${lazyClass},.${lazyBackgroundClass}`));\n\n  // This function handles lazy loading of elements.\n  const yallLoad = element => {\n    const parentNode = element.parentNode;\n\n    if (parentNode.nodeName == \"PICTURE\") {\n      yallApplyFn(queryDOM(\"source\", parentNode), yallFlipDataAttrs);\n    }\n\n    if (element.nodeName == \"VIDEO\") {\n      yallApplyFn(queryDOM(\"source\", element), yallFlipDataAttrs);\n    }\n\n    yallFlipDataAttrs(element);\n\n    const classList = element.classList;\n\n    // Lazy load CSS background images\n    if (classList.contains(lazyBackgroundClass)) {\n      classList.remove(lazyBackgroundClass);\n      classList.add(options.lazyBackgroundLoaded || \"lazy-bg-loaded\");\n    }\n  };\n\n  const yallBindEvents = element => {\n    for (let eventIndex in events) {\n      element.addEventListener(eventIndex, events[eventIndex].listener || events[eventIndex], events[eventIndex].options || undefined);\n    }\n  };\n\n  // Added because there was a number of patterns like this peppered throughout\n  // the code. This flips necessary data- attrs on an element and prompts video\n  // elements to begin playback automatically if they have autoplay specified.\n  const yallFlipDataAttrs = element => {\n    for (let dataAttrIndex in dataAttrs) {\n      if (dataAttrs[dataAttrIndex] in element.dataset) {\n        element.setAttribute(dataAttrs[dataAttrIndex], element.dataset[dataAttrs[dataAttrIndex]]);\n        const parentNode = element.parentNode;\n\n        if (element.nodeName === \"SOURCE\" && parentNode.autoplay) {\n          parentNode.load();\n\n          // For some reason, IE11 needs to have this method invoked in order\n          // for autoplay to start. So we do a yucky user agent check.\n          if (/Trident/.test(navigator.userAgent)) {\n            parentNode.play();\n          }\n\n          parentNode.classList.remove(lazyClass);\n        }\n\n        element.classList.remove(lazyClass);\n      }\n    }\n  };\n\n  // Noticed lots of loops where a function simply gets executed on every\n  // member of an array. This abstraction eliminates that repetitive code.\n  const yallApplyFn = (items, fn) => {\n    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n      win[io] && fn instanceof win[io] ? fn.observe(items[itemIndex]) : fn(items[itemIndex]);\n    }\n  };\n\n  const yallCreateMutationObserver = entry => {\n    new MutationObserver(() => {\n      yallApplyFn(queryDOM(), newElement => {\n        if (lazyElements.indexOf(newElement) < 0) {\n          lazyElements.push(newElement);\n          yallBindEvents(newElement);\n\n          if (ioSupport && !crawler) {\n            intersectionListener.observe(newElement);\n          } else if (noPolyfill || crawler) {\n            yallApplyFn(lazyElements, yallLoad);\n          }\n        }\n      });\n    }).observe(entry, options.mutationObserverOptions || {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  let lazyElements = queryDOM();\n\n  yallApplyFn(lazyElements, yallBindEvents);\n\n  // First we check if IntersectionObserver is supported. If not, we check to\n  // see if the `noPolyfill` option is set. If so, we load everything. If the\n  // current user agent is a known crawler, again, we load everything.\n  if (ioSupport && !crawler) {\n    var intersectionListener = new win[io](entries => {\n      yallApplyFn(entries, entry => {\n        if (entry.isIntersecting || entry.intersectionRatio) {\n          const element = entry.target;\n\n          if (ric in win && idleLoadTimeout) {\n            win[ric](() => {\n              yallLoad(element);\n            }, {\n              timeout: idleLoadTimeout\n            });\n          } else {\n            yallLoad(element);\n          }\n\n          intersectionListener.unobserve(element);\n          lazyElements = lazyElements.filter(lazyElement => lazyElement != element);\n\n          // If all the elements that were detected at load time are all loaded\n          // and we're not observing for changes, we're all done here.\n          if (!lazyElements.length && !observeChanges) {\n            intersectionListener.disconnect();\n          }\n        }\n      });\n    }, {\n      rootMargin: `${\"threshold\" in options ? options.threshold : 200}px 0%`\n    });\n\n    yallApplyFn(lazyElements, intersectionListener);\n\n    if (observeChanges) {\n      yallApplyFn(queryDOM(options.observeRootSelector || \"body\"), yallCreateMutationObserver);\n    }\n  } else if (noPolyfill || crawler) {\n    yallApplyFn(lazyElements, yallLoad);\n  }\n}\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n/**\n * A local reference to the root document.\n */\nvar document = (function(startDoc) {\n  var doc = startDoc;\n  var frame = getFrameElement(doc);\n  while (frame) {\n    doc = frame.ownerDocument;\n    frame = getFrameElement(doc);\n  }\n  return doc;\n})(window.document);\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n/**\n * The signal updater for cross-origin intersection. When not null, it means\n * that the polyfill is configured to work in a cross-origin mode.\n * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nvar crossOriginUpdater = null;\n\n/**\n * The current cross-origin intersection. Only used in the cross-origin mode.\n * @type {DOMRect|ClientRect}\n */\nvar crossOriginRect = null;\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = ensureDOMRect(entry.rootBounds);\n  this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n  this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Sets up the polyfill in the cross-origin mode. The result is the\n * updater function that accepts two arguments: `boundingClientRect` and\n * `intersectionRect` - just as these fields would be available to the\n * parent via `IntersectionObserverEntry`. This function should be called\n * each time the iframe receives intersection information from the parent\n * window, e.g. via messaging.\n * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nIntersectionObserver._setupCrossOriginUpdater = function() {\n  if (!crossOriginUpdater) {\n    /**\n     * @param {DOMRect|ClientRect} boundingClientRect\n     * @param {DOMRect|ClientRect} intersectionRect\n     */\n    crossOriginUpdater = function(boundingClientRect, intersectionRect) {\n      if (!boundingClientRect || !intersectionRect) {\n        crossOriginRect = getEmptyRect();\n      } else {\n        crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n      }\n      registry.forEach(function(observer) {\n        observer._checkForIntersections();\n      });\n    };\n  }\n  return crossOriginUpdater;\n};\n\n\n/**\n * Resets the cross-origin mode.\n */\nIntersectionObserver._resetCrossOriginUpdater = function() {\n  crossOriginUpdater = null;\n  crossOriginRect = null;\n};\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  if (doc != (this.root && this.root.ownerDocument || document)) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc = (this.root && this.root.ownerDocument || document);\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  if (!this.root && crossOriginUpdater && !crossOriginRect) {\n    // Cross origin monitoring, but no initial data available yet.\n    return;\n  }\n\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: crossOriginUpdater && !this.root ? null : rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        if (crossOriginUpdater && !this.root) {\n          if (!crossOriginRect ||\n              crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n            // A 0-size cross-origin intersection means no-intersection.\n            parent = null;\n            parentRect = null;\n            intersectionRect = null;\n          } else {\n            parentRect = crossOriginRect;\n          }\n        } else {\n          parentRect = rootRect;\n        }\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {ClientRect} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {DOMRect|ClientRect} rect The rect object to expand.\n * @return {ClientRect} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target) &&\n    (!this.root || this.root.ownerDocument == target.ownerDocument);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object|?ClientRect} The intersection rect or undefined if no\n *     intersection is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {ClientRect} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Ensure that the result has all of the necessary fields of the DOMRect.\n * Specifically this ensures that `x` and `y` fields are set.\n *\n * @param {?DOMRect|?ClientRect} rect\n * @return {?DOMRect}\n */\nfunction ensureDOMRect(rect) {\n  // A `DOMRect` object has `x` and `y` fields.\n  if (!rect || 'x' in rect) {\n    return rect;\n  }\n  // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n  // for internally calculated Rect objects. For the purposes of\n  // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n  // for these fields.\n  return {\n    top: rect.top,\n    y: rect.top,\n    bottom: rect.bottom,\n    left: rect.left,\n    x: rect.left,\n    right: rect.right,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n * @return {ClientRect} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n","import 'intersection-observer'\nimport yall from 'yall-js'\n\nif (window.yall === undefined) {\n  window.yall = yall\n  document.addEventListener('DOMContentLoaded', function () {\n    yall({\n      observeChanges: true,\n      threshold: 300\n    })\n  })\n}\n\n// TODO: rewrite code below using Intersection Observer API\n/* Searched elements with the class animation and adds the class in-view when in viewport to trigger animation */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const animationElements = document.querySelectorAll('.animation')\n\n  function checkIfInView () {\n    const windowHeight = window.innerHeight\n    const windowTopPosition = window.pageYOffset\n    const windowBottomPosition = (windowTopPosition + windowHeight)\n\n    for (let i = 0, len = animationElements.length; i < len; i++) {\n      const elementCurrent = animationElements[i]\n      const elementHeight = elementCurrent.offsetHeight\n      const elementTopPosition = elementCurrent.getBoundingClientRect().top + window.pageYOffset\n      const elementBottomPosition = (elementTopPosition + elementHeight)\n\n      if ((elementBottomPosition >= windowTopPosition) && (elementTopPosition <= windowBottomPosition)) {\n        elementCurrent.classList.add('in-view')\n      } else {\n        elementCurrent.classList.remove('in-view')\n      }\n    }\n  }\n  checkIfInView()\n\n  window.addEventListener('scroll', checkIfInView)\n  window.addEventListener('resize', checkIfInView)\n})\n"]}