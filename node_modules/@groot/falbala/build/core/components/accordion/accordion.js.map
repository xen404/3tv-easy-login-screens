{"version":3,"sources":["components/06-Accordion/accordion.js"],"names":["collapseAccordionPanel","accordionEntry","accordionPanel","document","getElementById","getAttribute","style","maxHeight","setTimeout","setAttribute","window","addEventListener","slice","call","querySelectorAll","forEach","accordion","isToggleMode","hasAttribute","triggers","trigger","event","currentAccordionEntry","target","isExpanded","activeEntry","querySelector","collapseOtherEntries","toggleCurrentAccordionEntry","removeAttribute","scrollHeight","preventDefault","clickHandler","key","which","toString","ctrlModifier","ctrlKey","match","index","indexOf","direction","length","focus","keyboardHandler"],"mappings":"uGAoFA,SAASA,EAAwBC,OACzBC,EAAiBC,SAASC,eAAeH,EAAeI,aAAa,kBAC3EH,EAAeI,MAAMC,UAAY,EACjCC,YAAW,kBAAMN,EAAeO,aAAa,SAAU,MAAK,KAtF9DC,OAAOC,iBAAiB,QAAQ,WACX,GAAGC,MAAMC,KAAKV,SAASW,iBAAiB,eAEhDC,SAAQ,SAACC,OACZC,EAAeD,EAAUE,aAAa,oBACtCC,EAAW,GAAGP,MAAMC,KAAKG,EAAUF,iBAAiB,wBAE1DK,EAASJ,SAAQ,SAACK,GAChBA,EAAQT,iBAAiB,SAAS,SAACU,mBAIdA,OACfC,EAAwBD,EAAME,OAC9BC,EAAqE,SAAxDF,EAAsBjB,aAAa,iBAChDoB,EAAcT,EAAUU,cAAc,0BAExCT,GACFU,aAKOC,IAsDf,IAA+B3B,EACvBC,EAtDKsB,GAOOP,GAAgBO,IAC1BF,EAAsBb,aAAa,gBAAiB,SACpDT,EAAuBsB,KARvBA,EAAsBb,aAAa,gBAAiB,QAoD/BR,EAnDAqB,GAoDvBpB,EAAiBC,SAASC,eAAeH,EAAeI,aAAa,mBAC5DwB,gBAAgB,UAC/B3B,EAAeI,MAAMC,UAAYL,EAAe4B,aAAe,KApDnDb,GACFK,EAAsBb,aAAa,gBAAiB,kBAQjDkB,IACHF,GAAeA,IAAgBH,IACjCG,EAAYhB,aAAa,gBAAiB,SAC1CgB,EAAYI,gBAAgB,iBAC5B7B,EAAuByB,IArB3BG,IACAP,EAAMU,iBAbuCC,CAAaX,MAC1DD,EAAQT,iBAAiB,SAAS,SAACU,mBAqCXA,OAClBE,EAASF,EAAME,OACfU,EAAMZ,EAAMa,MAAMC,WAClBC,EAAgBf,EAAMgB,SAAWJ,EAAIK,MAAM,YAI7CL,EAAIK,MAAM,UAAYF,EAAc,KAChCG,EAAQpB,EAASqB,QAAQjB,GACzBkB,EAAaR,EAAIK,MAAM,SAAY,GAAK,EACxCI,EAASvB,EAASuB,OAGxBvB,GAFkBoB,EAAQG,EAASD,GAAaC,GAE7BC,QAEnBtB,EAAMU,sBACD,GAAIE,EAAIK,MAAM,SAAU,QACrBL,OACD,KACHd,EAAS,GAAGwB,kBAET,KACHxB,EAASA,EAASuB,OAAS,GAAGC,QAGlCtB,EAAMU,kBA9DqCa,CAAgBvB","file":"accordion.js","sourcesContent":["'use strict'\nwindow.addEventListener('load', () => {\n  const accordions = [].slice.call(document.querySelectorAll('.accordion'))\n\n  accordions.forEach((accordion) => {\n    const isToggleMode = accordion.hasAttribute('data-toggle-mode')\n    const triggers = [].slice.call(accordion.querySelectorAll('.accordion__trigger'))\n\n    triggers.forEach((trigger) => {\n      trigger.addEventListener('click', (event) => clickHandler(event))\n      trigger.addEventListener('keyup', (event) => keyboardHandler(event))\n    })\n\n    function clickHandler (event) {\n      const currentAccordionEntry = event.target\n      const isExpanded = currentAccordionEntry.getAttribute('aria-expanded') === 'true'\n      const activeEntry = accordion.querySelector('[aria-expanded=\"true\"]')\n\n      if (isToggleMode) {\n        collapseOtherEntries()\n      }\n      toggleCurrentAccordionEntry()\n      event.preventDefault()\n\n      function toggleCurrentAccordionEntry () {\n        if (!isExpanded) {\n          currentAccordionEntry.setAttribute('aria-expanded', 'true')\n          expandAccordionPanel(currentAccordionEntry)\n\n          if (isToggleMode) {\n            currentAccordionEntry.setAttribute('aria-disabled', 'true')\n          }\n        } else if (!isToggleMode && isExpanded) {\n          currentAccordionEntry.setAttribute('aria-expanded', 'false')\n          collapseAccordionPanel(currentAccordionEntry)\n        }\n      }\n\n      function collapseOtherEntries () {\n        if (activeEntry && activeEntry !== currentAccordionEntry) {\n          activeEntry.setAttribute('aria-expanded', 'false')\n          activeEntry.removeAttribute('aria-disabled')\n          collapseAccordionPanel(activeEntry)\n        }\n      }\n    }\n\n    function keyboardHandler (event) {\n      const target = event.target\n      const key = event.which.toString()\n      const ctrlModifier = (event.ctrlKey && key.match(/33|34/)) // 33 = Page Up, 34 = Page Down\n\n      // Up/Down arrow and Control + Page Up/Page Down keyboard operations\n      // 38 = Up, 40 = Down\n      if (key.match(/38|40/) || ctrlModifier) {\n        const index = triggers.indexOf(target)\n        const direction = (key.match(/34|40/)) ? 1 : -1\n        const length = triggers.length\n        const newIndex = (index + length + direction) % length\n\n        triggers[newIndex].focus()\n\n        event.preventDefault()\n      } else if (key.match(/35|36/)) {\n        switch (key) {\n          case '36': // 36 = Home, go to first accordion entry\n            triggers[0].focus()\n            break\n          case '35': // 35 = End, Go to last accordion entry\n            triggers[triggers.length - 1].focus()\n            break\n        }\n        event.preventDefault()\n      }\n    }\n  })\n})\n\nfunction expandAccordionPanel (accordionEntry) {\n  const accordionPanel = document.getElementById(accordionEntry.getAttribute('aria-controls'))\n  accordionPanel.removeAttribute('hidden')\n  accordionPanel.style.maxHeight = accordionPanel.scrollHeight + 'px'\n}\n\nfunction collapseAccordionPanel (accordionEntry) {\n  const accordionPanel = document.getElementById(accordionEntry.getAttribute('aria-controls'))\n  accordionPanel.style.maxHeight = 0\n  setTimeout(() => accordionPanel.setAttribute('hidden', ''), 150)\n}\n"]}